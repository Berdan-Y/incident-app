@page "/incidents/report"
@using Shared.Models.Enums
@using Shared.Models.Dtos
@using Microsoft.Extensions.Logging
@inject ThemeService ThemeService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@inject ILogger<CreateIncident> Logger
@inject IJSRuntime JS

<PageTitle>Report Incident</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Report New Incident</MudText>
        
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField @bind-Value="incident.Title" 
                         Label="Title" 
                         Required="true" 
                         RequiredError="Title is required!"
                         MaxLength="200"
                         Class="mb-4"/>
            
            <MudTextField @bind-Value="incident.Description" 
                         Label="Description" 
                         Required="true" 
                         RequiredError="Description is required!"
                         Lines="3"
                         Class="mb-4"/>
            
            <MudText Typo="Typo.subtitle1" Class="mb-2">Location Information</MudText>
            <MudRadioGroup T="LocationInputMethod" 
                          @bind-Value="locationInputMethod"
                          Class="mb-4">
                <MudRadio T="LocationInputMethod" Value="@LocationInputMethod.Coordinates" Color="Color.Primary">Coordinates (Latitude/Longitude)</MudRadio>
                <MudRadio T="LocationInputMethod" Value="@LocationInputMethod.Address" Color="Color.Primary">Address</MudRadio>
            </MudRadioGroup>
            
            @if (locationInputMethod == LocationInputMethod.Coordinates)
            {
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="incident.Latitude" 
                                       Label="Latitude" 
                                       Required="true"
                                       RequiredError="Latitude is required!"
                                       Min="-90" 
                                       Max="90"
                                       Class="mb-4"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="incident.Longitude" 
                                       Label="Longitude" 
                                       Required="true"
                                       RequiredError="Longitude is required!"
                                       Min="-180" 
                                       Max="180"
                                       Class="mb-4"/>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudTextField @bind-Value="incident.Address" 
                             Label="Address" 
                             Required="true"
                             RequiredError="Address is required!"
                             MaxLength="500"
                             Class="mb-4"/>
                
                <MudTextField @bind-Value="incident.ZipCode" 
                             Label="Zip Code" 
                             Required="true"
                             RequiredError="Zip Code is required!"
                             MaxLength="20"
                             Class="mb-4"/>
            }
            
            <MudFileUpload T="IBrowserFile" 
                           FilesChanged="OnFilesChanged" 
                           Accept=".jpg,.jpeg,.png" 
                           Class="mb-4"
                           Label="Upload Photos"
                           ButtonColor="Color.Secondary"
                           ButtonVariant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.CloudUpload"/>
            <CameraCapture />
            
            @if (uploadedFiles.Any())
            {
                <MudGrid>
                    @foreach (var file in uploadedFiles)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard>
                                <MudImage Src="@file.Url" Alt="@file.Name" ObjectFit="ObjectFit.Cover" Height="200"/>
                                <MudCardActions>
                                    <MudButton OnClick="@(() => RemoveFile(file))" Color="Color.Error" Size="Size.Small">Remove</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="Submit" 
                      Disabled="@(!success)"
                      Class="mt-4">
                Submit Report
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form = null!;
    private bool success;
    private string[] errors = Array.Empty<string>();
    private IncidentCreateDto incident = new()
    {
        Title = string.Empty,
        Description = string.Empty,
        Priority = Priority.Unknown
    };
    private List<UploadedFile> uploadedFiles = new();
    private LocationInputMethod _locationInputMethod = LocationInputMethod.Coordinates;
    
    private LocationInputMethod locationInputMethod
    {
        get => _locationInputMethod;
        set
        {
            if (_locationInputMethod != value)
            {
                _locationInputMethod = value;
                HandleLocationMethodChange(value);
            }
        }
    }
    
    public enum LocationInputMethod
    {
        Coordinates,
        Address
    }
    
    private class UploadedFile
    {
        public required string Name { get; set; }
        public required string Url { get; set; }
        public required IBrowserFile File { get; set; }
    }
    
    private async Task OnFilesChanged(IBrowserFile file)
    {
        if (uploadedFiles.Count >= 10)
        {
            Snackbar.Add("Maximum 10 photos allowed", Severity.Warning);
            return;
        }
        
        if (file.Size > 5 * 1024 * 1024) // 5MB limit
        {
            Snackbar.Add("File size must be less than 5MB", Severity.Warning);
            return;
        }
        
        var url = await GetImageUrl(file);
        uploadedFiles.Add(new UploadedFile
        {
            Name = file.Name,
            Url = url,
            File = file
        });
    }
    
    private void RemoveFile(UploadedFile file)
    {
        uploadedFiles.Remove(file);
    }
    
    private async Task<string> GetImageUrl(IBrowserFile file)
    {
        // Create a temporary URL for the file
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var base64 = Convert.ToBase64String(buffer);
        return $"data:{file.ContentType};base64,{base64}";
    }
    
    private async Task Submit()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            
            // Create form data
            var formData = new MultipartFormDataContent();
            
            // Add incident data as JSON
            var incidentJson = System.Text.Json.JsonSerializer.Serialize(incident);
            formData.Add(new StringContent(incidentJson, System.Text.Encoding.UTF8, "application/json"), "incident");
            
            // Add photos
            foreach (var file in uploadedFiles)
            {
                var stream = file.File.OpenReadStream();
                var content = new StreamContent(stream);
                content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.File.ContentType);
                formData.Add(content, "photos", file.Name);
            }
            
            // Send request
            var response = await httpClient.PostAsync("api/Incident", formData);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Incident reported successfully", Severity.Success);
                NavigationManager.NavigateTo("/incidents");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set initial values based on the default location method
        if (locationInputMethod == LocationInputMethod.Coordinates)
        {
            incident.Address = string.Empty;
            incident.ZipCode = string.Empty;
        }
        else
        {
            incident.Latitude = 0.0;
            incident.Longitude = 0.0;
        }
    }

    private async Task HandleLocationMethodChange(LocationInputMethod method)
    {
        // Clear the other method's values
        if (method == LocationInputMethod.Coordinates)
        {
            incident.Address = string.Empty;
            incident.ZipCode = string.Empty;
        }
        else
        {
            incident.Latitude = 0.0;
            incident.Longitude = 0.0;
        }

        // Revalidate the form
        await form.Validate();
        StateHasChanged();
    }
}