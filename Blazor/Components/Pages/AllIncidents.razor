@page "/incidents"
@using GoogleMaps
@using GoogleMaps.Markers
@using Shared.Models.Classes
@using Shared.Models.Dtos
@using Blazor.Components.Services
@using Blazor.Services
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject ILogger<AllIncidents> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>All Incidents</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText>Loading incidents...</MudText>
        }
        else if (_error != null)
        {
            <MudAlert Severity="Severity.Error">@_error</MudAlert>
        }
        else if (_incidents == null || !_incidents.Any())
        {
            <MudAlert Severity="Severity.Info">No incidents found.</MudAlert>
        }
        else
        {
            <MudTable Items="@_incidents" Dense="true" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Created At</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate Context="incident">
                    <MudTd DataLabel="ID">@incident.Id</MudTd>
                    <MudTd DataLabel="Title">@incident.Title</MudTd>
                    <MudTd DataLabel="Description">@incident.Description</MudTd>
                    <MudTd DataLabel="Status">@incident.Status</MudTd>
                    <MudTd DataLabel="Created At">@incident.CreatedAt.ToLocalTime().ToString("g")</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="@MudBlazor.Size.Small" 
                                 OnClick="@(() => NavigateToEdit(incident.Id))">Edit</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
            <MudAlert Severity="Severity.Warning">Please log in to view incidents.</MudAlert>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<IncidentResponseDto>? _incidents;
    private string? _error;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Component initialized");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("First render completed, waiting briefly before loading incidents");
            
            // Add a small delay to ensure we're completely out of prerendering context
            await Task.Delay(100);
            
            try
            {
                // Check if JavaScript is available
                if (!CanAccessJavaScript())
                {
                    Logger.LogInformation("JavaScript not available yet, will retry on next render");
                    return;
                }

                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (!authState.User.Identity?.IsAuthenticated ?? true)
                {
                    Logger.LogWarning("User is not authenticated, redirecting to login");
                    NavigationManager.NavigateTo("/login");
                    return;
                }

                Logger.LogInformation("User is authenticated, loading incidents");
                await LoadIncidents();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error in OnAfterRenderAsync");
                _error = "An error occurred while loading the page.";
                _isLoading = false;
                StateHasChanged();
            }
        }
    }

    private bool CanAccessJavaScript()
    {
        return JSRuntime.GetType().Name != "UnsupportedJavaScriptRuntime";
    }

    private async Task LoadIncidents()
    {
        try
        {
            _isLoading = true;
            _error = null;
            StateHasChanged();

            Logger.LogInformation("Attempting to load incidents from API");
            var incidents = await ApiClient.GetAllIncidentsAsync();
            _incidents = incidents?.ToList();
            Logger.LogInformation("Successfully loaded {Count} incidents", _incidents?.Count ?? 0);
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("401"))
        {
            Logger.LogError(ex, "Unauthorized error loading incidents");
            _error = "Authentication failed. Please log in again.";
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading incidents");
            _error = "Failed to load incidents. Please try again later.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToEdit(Guid id)
    {
        NavigationManager.NavigateTo($"/incidents/edit/{id}");
    }
}