@inject IJSRuntime JS

<MudPaper Class="pa-4" Style="max-width: 450px; margin:auto;">
    <MudButton Color="Color.Secondary"
               Variant="Variant.Outlined"
               StartIcon="@Icons.Material.Filled.CameraAlt"
               OnClick="StartCamera"
               Disabled="isCameraRunning"
               Class="mb-2">
        Start Camera
    </MudButton>

    <MudButton Color="Color.Primary"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.PhotoCamera"
               OnClick="TakePhoto"
               Disabled="!isCameraRunning"
               Class="mb-2 ml-2">
        Take Photo
    </MudButton>

    <div>
        <video id="video" autoplay playsinline width="400" style="border-radius:8px; background:#000"></video>
    </div>

    <div class="mt-4">
        @if (capturedImages != null && capturedImages.Count > 0)
        {
            <MudText Typo="Typo.subtitle1">Captured Photo(s):</MudText>
            <MudGrid>
                @foreach (var (img, index) in capturedImages.Select((img, i) => (img, i)))
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard>
                            <MudImage Src="@img" Alt="Captured" ObjectFit="ObjectFit.Cover" Height="200"/>
                            <MudCardActions>
                                <MudButton OnClick="@(() => RemovePhoto(index))" Color="Color.Error" Size="Size.Small">Remove</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
            <MudButton Color="Color.Error"
                       Variant="Variant.Text"
                       StartIcon="@Icons.Material.Filled.Delete"
                       OnClick="@ClearPhotos"
                       Disabled="@(!capturedImages.Any())"
                       Class="mb-2">
                Clear All Photos
            </MudButton>
        }
    </div>
</MudPaper>

@code {
    private bool isCameraRunning = false;
    private List<string> capturedImages = new();

    [Parameter]
    public EventCallback<List<string>> OnImagesCaptured { get; set; }

    private async Task StartCamera()
    {
        await JS.InvokeVoidAsync("startCamera");
        isCameraRunning = true;
        capturedImages.Clear();
        await OnImagesCaptured.InvokeAsync(capturedImages);
    }

    private async Task TakePhoto()
    {
        try
        {
            var photoDataUrl = await JS.InvokeAsync<string>("takePhoto");
            if (!string.IsNullOrWhiteSpace(photoDataUrl))
            {
                capturedImages.Add(photoDataUrl);
                await JS.InvokeVoidAsync("setCapturedImages", capturedImages);
                await OnImagesCaptured.InvokeAsync(capturedImages);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No photo returned from JS.");
            }
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex}");
            throw;
        }
    }
    
    private async Task RemovePhoto(int index)
    {
        if (index >= 0 && index < capturedImages.Count)
        {
            capturedImages.RemoveAt(index);
            await JS.InvokeVoidAsync("setCapturedImages", capturedImages);
            await OnImagesCaptured.InvokeAsync(capturedImages);
            StateHasChanged();
        }
    }
    
    private async Task ClearPhotos()
    {
        capturedImages.Clear();
        await JS.InvokeVoidAsync("setCapturedImages", capturedImages);
        await OnImagesCaptured.InvokeAsync(capturedImages);
    }
}