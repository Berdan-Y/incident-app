@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@implements IDisposable

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16 px-8">
                            <MudText Align="Align.Center" Typo="Typo.h3" Class="mb-8">Access Denied</MudText>
                            <MudText Align="Align.Center" Class="mb-4">You are not authorized to access this page.</MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/" FullWidth="true">Go to Home</MudButton>
                        </MudContainer>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16 px-8">
                    <MudText Align="Align.Center" Typo="Typo.h3" Class="mb-8">404 - Page Not Found</MudText>
                    <MudText Align="Align.Center" Class="mb-4">Sorry, there's nothing at this address.</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/" FullWidth="true">Go to Home</MudButton>
                </MudContainer>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

<MudThemeProvider Theme="@ThemeService.CurrentTheme" IsDarkMode="@ThemeService.IsDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    [Inject] private ThemeService ThemeService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeService.InitializeAsync();
            ThemeService.OnChange += StateHasChanged;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ThemeService.OnChange -= StateHasChanged;
    }
}