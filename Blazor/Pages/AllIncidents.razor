@page "/all-incidents"
@using Shared.Models.Dtos
@using Shared.Api
@using Shared.Models.Enums
@using Blazor.Services
@inject IIncidentApi IncidentApi
@inject IGoogleMapsService GoogleMapsService
@inject NavigationManager NavigationManager

<MudContainer Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h3">All Incidents</MudText>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton OnClick="@(() => viewType = ViewType.Cards)" 
                      Variant="@(viewType == ViewType.Cards ? Variant.Filled : Variant.Outlined)">
                <MudIcon Icon="@Icons.Material.Filled.ViewModule" Class="mr-2"/>Cards
            </MudButton>
            <MudButton OnClick="@(() => viewType = ViewType.Map)"
                      Variant="@(viewType == ViewType.Map ? Variant.Filled : Variant.Outlined)">
                <MudIcon Icon="@Icons.Material.Filled.Map" Class="mr-2"/>Map
            </MudButton>
        </MudButtonGroup>
    </div>

    @if (incidents == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!incidents.Any())
    {
        <MudAlert Severity="Severity.Info">No incidents found.</MudAlert>
    }
    else
    {
        @if (viewType == ViewType.Cards)
        {
            <MudGrid>
                @foreach (var incident in incidents)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Elevation="3" Class="mb-4">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6">@incident.Title</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack>
                                    <MudText Class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Flag" Class="mr-2" />
                                        Status: <MudChip Color="@GetStatusColor(incident.Status.ToString())" Size="Size.Small" Class="ml-1">@incident.Status</MudChip>
                                    </MudText>
                                    <MudText Class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.PriorityHigh" Class="mr-2" />
                                        Priority: 
                                        @if (editingPriorityId != incident.Id)
                                        {
                                            <span class="d-flex align-center">
                                                <MudChip Color="@GetPriorityColor(incident.Priority.ToString())" Size="Size.Small" Class="ml-1 mr-2">@incident.Priority</MudChip>
                                                <MudIconButton Size="Size.Small"
                                                             Icon="@Icons.Material.Filled.Edit"
                                                             OnClick="@(() => editingPriorityId = incident.Id)"
                                                             Class="pa-0 ml-1" />
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="d-flex align-center ml-1">
                                                <MudSelect T="Priority" 
                                                         Value="@incident.Priority"
                                                         ValueChanged="@(async (Priority p) => await UpdatePriorityAsync(incident.Id, p))"
                                                         Dense="true"
                                                         Style="min-width: 120px;">
                                                    @foreach (var priority in Enum.GetValues<Priority>())
                                                    {
                                                        <MudSelectItem Value="@priority">@priority</MudSelectItem>
                                                    }
                                                </MudSelect>
                                                <MudIconButton Size="Size.Small"
                                                             Icon="@Icons.Material.Filled.Close"
                                                             OnClick="@(() => editingPriorityId = Guid.Empty)"
                                                             Class="ml-2" />
                                            </span>
                                        }
                                    </MudText>
                                    <MudText Class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="mr-2" />
                                        Created: @incident.CreatedAt.ToLocalTime().ToString("g")
                                    </MudText>
                                </MudStack>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary" 
                                         OnClick="@(() => ViewDetails(incident.Id))"
                                         StartIcon="@Icons.Material.Filled.Visibility">
                                    View Details
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <div class="map-container" @ref="mapElement"></div>
        }
    }
</MudContainer>

@code {
    private List<IncidentResponseDto> incidents;
    private Guid editingPriorityId = Guid.Empty;
    private ViewType viewType = ViewType.Cards;
    private ElementReference mapElement;
    private int? mapId;

    private enum ViewType
    {
        Cards,
        Map
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await IncidentApi.GetIncidentsAsync();
            if (response.IsSuccessStatusCode)
            {
                incidents = response.Content;
            }
            else
            {
                // Handle error
                Console.WriteLine($"Error: {response.Error?.Content}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (viewType == ViewType.Map && mapId == null)
        {
            mapId = await GoogleMapsService.InitializeMapAsync(mapElement);
            if (incidents != null)
            {
                foreach (var incident in incidents)
                {
                    if (incident.Latitude != 0 || incident.Longitude != 0)
                    {
                        await GoogleMapsService.AddMarkerAsync(
                            mapId.Value,
                            incident.Latitude,
                            incident.Longitude,
                            incident.Title
                        );
                    }
                }
            }
        }
    }

    private async Task UpdatePriorityAsync(Guid incidentId, Priority newPriority)
    {
        try
        {
            var response = await IncidentApi.UpdateIncidentPriorityAsync(incidentId, (int)newPriority);
            if (response.IsSuccessStatusCode)
            {
                // Update the local incident's priority
                var incident = incidents.FirstOrDefault(i => i.Id == incidentId);
                if (incident != null)
                {
                    incident.Priority = newPriority;
                    editingPriorityId = Guid.Empty; // Hide the select after successful update
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating priority: {ex.Message}");
        }
    }

    private void ViewDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/incident/{id}");
    }

    private Color GetStatusColor(string status) => status?.ToLower() switch
    {
        "todo" => Color.Error,
        "inprogress" => Color.Warning,
        "done" => Color.Success,
        _ => Color.Default
    };

    private Color GetPriorityColor(string priority) => priority?.ToLower() switch
    {
        "high" => Color.Error,
        "medium" => Color.Warning,
        "low" => Color.Success,
        "unknown" => Color.Default,
        _ => Color.Default
    };
} 