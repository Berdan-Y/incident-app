@page "/register"
@using System.ComponentModel.DataAnnotations
@using Blazor.Services
@using Shared.Models.Dtos
@using Shared.Models
@using Shared.Models.Enums
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@code {
    protected override void OnInitialized()
    {
        try
        {
            AuthService.RequireAdmin();
        }
        catch
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri);
            return;
        }
    }
}

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
    <MudPaper Class="pa-8" Style="width: 500px;">
        <MudText Typo="Typo.h4" Class="mb-4">Register New User</MudText>
        <MudForm @ref="form" @bind-IsValid="@success" ValidationDelay="0">
            <MudTextField 
                @bind-Value="registerRequest.FirstName" 
                Label="First Name" 
                Required="true" 
                RequiredError="First name is required"
                Immediate="true" />

            <MudTextField 
                @bind-Value="registerRequest.LastName" 
                Label="Last Name" 
                Required="true" 
                RequiredError="Last name is required"
                Immediate="true" />

            <MudTextField 
                @bind-Value="registerRequest.Email" 
                Label="Email" 
                Required="true" 
                RequiredError="Email is required"
                Validation="@ValidateEmail"
                Immediate="true" />
            
            <MudTextField 
                @bind-Value="registerRequest.Password" 
                Label="Password" 
                Required="true"
                RequiredError="Password is required"
                InputType="InputType.Password"
                Immediate="true" />

            <MudTextField 
                @bind-Value="_confirmPassword" 
                Label="Confirm Password" 
                Required="true"
                RequiredError="Password confirmation is required"
                InputType="InputType.Password"
                Validation="@(new Func<string, string>(ValidatePasswordConfirmation))"
                Immediate="true" />

            <MudSelect T="string" 
                      Label="Role" 
                      Required="true" 
                      RequiredError="Role is required"
                      Value="@(registerRequest.Role?.ToString() ?? "Member")"
                      ValueChanged="@(HandleRoleChange)"
                      Immediate="true"
                      AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("Member")">Member</MudSelectItem>
                <MudSelectItem Value="@("FieldEmployee")">Field Employee</MudSelectItem>
                <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
            </MudSelect>

            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    Disabled="@(!success || _processing)" 
                    OnClick="HandleRegister"
                    Class="ml-auto">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Register</MudText>
                    }
                </MudButton>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form;
    private bool success;
    private bool _processing;
    private string _confirmPassword = string.Empty;
    private RegisterRequest registerRequest = new()
    {
        FirstName = string.Empty,
        LastName = string.Empty,
        Email = string.Empty,
        Password = string.Empty,
        Role = Role.Member
    };

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return "Email is required";
        if (!new EmailAddressAttribute().IsValid(email))
            return "Invalid email address";
        return string.Empty;
    }

    private string ValidatePasswordConfirmation(string confirmPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmPassword))
            return "Password confirmation is required";
        if (confirmPassword != registerRequest.Password)
            return "Passwords do not match";
        return string.Empty;
    }

    private async Task HandleRegister()
    {
        await form.Validate();
        if (!success)
        {
            var emailField = form.Errors.FirstOrDefault(e => e.Contains("email", StringComparison.OrdinalIgnoreCase));
            if (emailField != null)
            {
                Snackbar.Add("Please enter a valid email address.", Severity.Warning);
                return;
            }
            
            Snackbar.Add("Please fix the validation errors before submitting.", Severity.Warning);
            return;
        }
        
        _processing = true;
        try
        {
            var registerDto = new RegisterDto
            {
                Email = registerRequest.Email!,
                Password = registerRequest.Password!,
                FirstName = registerRequest.FirstName!,
                LastName = registerRequest.LastName!,
                Role = registerRequest.Role
            };
            
            if (await AuthService.RegisterAsync(registerDto))
            {
                Snackbar.Add("User registered successfully", Severity.Success);
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
            }
            else
            {
                Snackbar.Add("Registration failed", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Registration failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private void HandleRoleChange(string value)
    {
        if (Enum.TryParse<Role>(value, out var role))
        {
            registerRequest.Role = role;
        }
        else
        {
            registerRequest.Role = Role.Member;
        }
    }
} 